1. What do you understand By Database
Ans:-
	A database is a collection of organized and structured data that is stored and managed on a computer system. It is designed to store, manage, and retrieve large amounts of data quickly and efficiently. A database can be used to store information related to various aspects of an organization or a business, such as customer records, employee information, inventory data, financial records, and more.

Databases are essential for many applications, from simple data entry systems to complex business applications. They are used in various fields, such as finance, healthcare, education, e-commerce, and more, to store, organize, and retrieve data efficiently. Databases use different types of software and technologies to manage and store data, including relational databases, NoSQL databases, object-oriented databases, and more.

2. What is Normalization?
Ans:-
	Normalization is a process in database design that involves organizing data in a database in such a way that it reduces data redundancy and improves data integrity. The main goal of normalization is to eliminate data anomalies, inconsistencies, and duplications that can occur in a poorly designed database.

	n general, normalization involves dividing a database into two or more tables and establishing relationships between them. This process reduces data redundancy by ensuring that each piece of data is stored only once in the database. It also improves data integrity by making it easier to update, delete, and insert data without introducing errors or inconsistencies.


3. What is Difference between DBMS and RDBMS?
Ans:-
	DBMS stands for Database Management System, while RDBMS stands for Relational 
Database Management System. The main difference between the two is that an RDBMS 
is a type of DBMS that is specifically designed to work with relational databases.

    Relational databases organize data into tables, which are composed of rows and 
columns. The columns represent the attributes of the data, while the rows 
represent the actual data values. In an RDBMS, tables can be related to one 
another through the use of foreign keys, which are used to create relationships 
between tables.

    A DBMS, on the other hand, is a general term that refers to any system that 
manages databases. This can include systems that work with non-relational 
databases, such as hierarchical or network databases, as well as systems 
that work with relational databases.

    In summary, all RDBMS are DBMS, but not all DBMS are RDBMS. An RDBMS is a 
specialized type of DBMS that is designed specifically to work with relational 
databases.


4. What is MF Cod Rule of RDBMS Systems?
Ans:-
	Rule zero
This rule states that for a system to qualify as an RDBMS, it must be able to manage database entirely through the relational capabilities.

Rule 1: Information rule
All information(including metadata) is to be represented as stored data in cells of tables. The rows and columns have to be strictly unordered.

Rule 2: Guaranted Access
Each unique piece of data(atomic value) should be accesible by : Table Name + Primary Key(Row) + Attribute(column).

Rule 3: Systematic treatment of NULL
Null has several meanings, it can mean missing data, not applicable or no value. It should be handled consistently. Also, Primary key must not be null, ever. Expression on NULL must give null.

Rule 4: Active Online Catalog
Database dictionary(catalog) is the structure description of the complete Database and it must be stored online. The Catalog must be governed by same rules as rest of the database. The same query language should be used on catalog as used to query database.

Rule 5: Powerful and Well-Structured Language
One well structured language must be there to provide all manners of access to the data stored in the database. Example: SQL, etc. If the database allows access to the data without the use of this language, then that is a violation.

Rule 6: View Updation Rule
All the view that are theoretically updatable should be updatable by the system as well.

Rule 7: Relational Level Operation
There must be Insert, Delete, Update operations at each level of relations. Set operation like Union, Intersection and minus should also be supported.

Rule 8: Physical Data Independence
The physical storage of data should not matter to the system. If say, some file supporting table is renamed or moved from one disk to another, it should not effect the application.

Rule 9: Logical Data Independence
If there is change in the logical structure(table structures) of the database the user view of data should not change. Say, if a table is split into two tables, a new view should give result as the join of the two tables. This rule is most difficult to satisfy.

Rule 10: Integrity Independence
The database should be able to enforce its own integrity rather than using other programs. Key and Check constraints, trigger etc, should be stored in Data Dictionary. This also make RDBMS independent of front-end.

Rule 11: Distribution Independence
A database should work properly regardless of its distribution across a network. Even if a database is geographically distributed, with data stored in pieces, the end user should get an impression that it is stored at the same place. This lays the foundation of distributed database.

Rule 12: Nonsubversion Rule
If low level access is allowed to a system it should not be able to subvert or bypass integrity rules to change the data. This can be achieved by some sort of looking or encryption.

5. What do you understand By Data Redundancy?
Ans:-
	Data redundancy can be problematic for several reasons. Firstly, it can 
waste storage space, as multiple copies of the same data must be stored. 
Secondly, it can lead to inconsistencies in the data, as changes made to 
one copy of the data may not be reflected in other copies. This can result 
in data discrepancies and inaccuracies.

    In addition to these issues, data redundancy can also make it more difficult 
to maintain and update a database, as changes must be made to multiple copies 
of the same data. This can increase the likelihood of errors and make it more 
time-consuming to manage the database.

    To avoid data redundancy, DBMS designers aim to create normalized databases 
that adhere to certain rules and guidelines for organizing data. Normalization 
involves breaking down large tables into smaller, more specific tables, 
and establishing relationships between them to reduce redundancy and improve 
data integrity.

6. What is DDL Interpreter?
Ans:-
	DDL Interpreter stands for Data Definition Language Interpreter. 
It is a software tool that interprets and executes commands written in a 
Data Definition Language (DDL) used to define the structure of a database.

DDL is a subset of SQL (Structured Query Language) used to define the d
atabase schema, including tables, columns, constraints, indexes, and other 
database objects. DDL Interpreter reads and executes DDL commands to create, 
modify or delete the database schema as per the user's instructions.

7.  What is DML Compiler in SQL?
Ans:-
	DML (Data Manipulation Language) Compiler is responsible for translating data 
manipulation statements written in SQL into low-level instructions that can be 
executed by the database management system (DBMS).

    DML statements are used to insert, update, delete or retrieve data from a 
database. The DML compiler takes these statements and converts them into an 
executable format that can be used by the database engine to modify the data 
stored in the database.

    The DML Compiler is an important component of any DBMS, as it enables users 
to manipulate data in a database using a high-level language like SQL, rather 
than having to write low-level instructions directly. This makes it easier for 
developers to work with databases and ensures that data manipulation is carried 
out in a consistent and efficient manner.

8. What is SQL Key Constraints writing an Example of SQL Key Constraints
Ans:-
	SQL key constraints are used to ensure the integrity of the data in a 
table by enforcing certain rules or requirements on the values that are 
stored in specific columns. There are several types of key constraints in 
SQL, including primary keys, foreign keys, unique keys, and check constraints.

Here is an example of a primary key constraint:
CREATE TABLE Customers (
   CustomerID INT PRIMARY KEY,
   FirstName VARCHAR(50),
   LastName VARCHAR(50),
);

9. What is save Point? How to create a save Point write a Query?
Ans:-
	In the context of databases, a save point is a named marker within a 
transaction that allows you to roll back to a specific point in the transaction 
if needed. Save points can be useful when you want to undo some part of a 
transaction while keeping the changes that were made up to that point.

To create a save point in SQL, you can use the SAVEPOINT command 
followed by the name of the save point:
SAVEPOINT ;

10. What is trigger and how to create a Trigger in SQL?
Ans:-
	n SQL, a trigger is a special type of stored procedure that is automatically 
executed in response to certain database events, such as an insert, update, 
or delete operation on a table. The purpose of a trigger is to take some action 
or enforce some rule when a certain event occurs.

To create a trigger in SQL, you can use the following syntax:
CREATE [OR REPLACE] TRIGGER trigger_name
{BEFORE | AFTER} {INSERT | UPDATE | DELETE} [OF column_name]
ON table_name
[REFERENCING OLD AS old NEW AS new]
[FOR EACH ROW]
[WHEN (condition)]
BEGIN
-- trigger body goes here
END;
